{"version":3,"sources":["ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDoList","state","hide","hideList","_this","setState","onClearItemClick","console","log","props","clearItem","index","react_default","a","createElement","className","this","onClick","mylist","task","Component","App","list","myList","quotes","updateForm","event","newData","target","value","originalState","copy","Object","assign","name","submitForm","preventDefault","slice","push","clearList","copyItem","splice","_this2","axios","method","url","then","response","data","contents","quote","catch","error","_this3","toDoList","map","listData","src_ToDoList","onSubmit","type","onChange","placeholder","length","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.82434e03.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ToDoList extends Component {\n    state = {hide: \"false\"};\n    hideList= ()=>{ // function that marks the item as complete\n      \n      if (this.state.hide===\"false\"){\n          this.setState({hide:'hidden'})\n      }else{\n          this.setState({hide:\"false\"})\n      }\n    //   console.log('hello');\n    }\n\n    onClearItemClick = () => { //function that deletes one item \n      console.log('onClearItemClick')\n      this.props.clearItem(this.props.index);\n    }\n\n    render() {\n     \n   \n      return (\n        \n            <li className={this.state.hide}>\n            <span onClick={this.hideList}>\n              {this.props.mylist.task}\n            </span>\n             <button onClick={this.onClearItemClick}> clear item</button>\n            </li>   \n           \n       \n      );\n    }\n  }\n  \n  export default ToDoList;\n  ","import React, { Component } from 'react';\nimport ToDoList from './ToDoList'\nimport './App.css';\nimport axios from 'axios';\nclass App extends Component {\n  state = { //save the data \n   list:{\n     task: '',\n    },\n    myList: [],\n    quotes: \"\"\n  }\n  updateForm = (event) => {\n\n    const newData = event.target.value; //get new value the user typed\n    const originalState = this.state.list; // get the old value\n    const copy = Object.assign({}, originalState);// make a copy of the original state\n    const key = event.target.name;// get the key form the name of input\n    copy[key] = newData; // update the copy with the data the user typed\n    console.log(copy);// update the state with the new copy\n    this.setState({\n      list: copy \n    })\n  }\n  submitForm = (event) => {\n   \n    event.preventDefault(); // prevent the user to refresh the page\n    console.log(\"submit\" , this.state.list);\n    const copy = this.state.myList.slice(0);  //make a copy of the myList array \n    if( this.state.list.task !== \"\"){ // check the if the task empty or not before print it to the user screen\n    copy.push(this.state.list);     // add the new myList data to the array\n    //update the state with our new copy \n    this.setState({\n      myList:copy,\n      list: {\n        task: ''\n      }\n    })\n  }\n\n  }\n  clearList = ()=>{ //clears all the list from the array\n    this.setState({\n      myList: [] // let the array empty\n    })\n  }\n  clearItem = (index)=>{ // clears one item from the list\n    const copyItem = this.state.myList.splice(index,1); // remove one item from the array\n    this.setState({\n     task:copyItem //  update the state with the new copy\n    })\n  }\n  componentDidMount(){ //it like axios method\n    console.log('hi');\n    axios({\n      method: 'get',\n      url: \"https://quotes.rest/qod.json\" // the url for the quote that changes everday\n    }).then((response) => {\n      console.log(response.data.contents.quotes[0].quote) // print the quotes in the console\n      this.setState({\n        quotes: response.data.contents.quotes[0].quote, // update the new value for the qoutes\n      })\n      // console.log(response)\n    })\n  .catch((error) => {console.log(error)});\n  \n}\n\n  render() {\n    const toDoList = this.state.myList.map((listData,index) => { // map the myList array to the new variable toDoList\n      return (\n        \n        <ToDoList mylist={listData} index = {index} clearItem={this.clearItem}/> // creates object for the component ToDoList to use it in onother component\n      );\n    })\n    return (\n      <div className=\"container\">\n         <form onSubmit={this.submitForm}> {/*call the function submitForm */}\n          <h1>To-Do List</h1>\n          <label>My Tasks</label>\n          <input type='text' name='task' onChange={this.updateForm} value={this.state.list.task} placeholder=\"Type Your Tasks\"   />\n          <button type='submit'> Add</button> \n          <button onClick={this.clearList} type=\"button\"> Remove List</button>\n        </form>\n        \n        <div className=\"list\">\n          \n          <div>\n          <ul>\n         { toDoList.length === 0 ? \"\" : toDoList} {/* check if toDoList is empty or not */}\n         </ul>\n        </div>\n        </div>\n       <div className = \" containerQuotes\"> <p>{this.state.quotes}</p></div>\n       \n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// add bootstrap\n// import \"../node_modules/bootstrap/dist/css/bootstrap.css\"\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}